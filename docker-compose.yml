# Id: docker-compose-full.yml 1.0.0
# Author: KaguneProject <sannix@kaguneproject.com>
# Requirements: Docker >=1.19, Docker-compose >=1.26.2
---
  version: "3.6"
  # -----------------------------------------------------------------------
  # Services declaration.
  # -----------------------------------------------------------------------
  services:
    zookeeper:
      image: confluentinc/cp-zookeeper:6.0.1
      hostname: zookeeper
      container_name: zookeeper
      ports:
        - '2181:2181'
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
  
    broker:
      image: confluentinc/cp-server:6.0.1
      hostname: broker
      container_name: broker
      depends_on:
        - zookeeper
      ports:
        - '9092:9092'
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
        KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
        CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
        CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
        CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
        CONFLUENT_METRICS_ENABLE: 'true'
        CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
  
    kafdrop:
      image: obsidiandynamics/kafdrop
      restart: "no"
      ports:
        - "9000:9000"
      environment:
        KAFKA_BROKERCONNECT: "broker:29092"
        JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
      depends_on:
        - "broker"
  
    connect:
      build:
        context: ./assets/connect
      hostname: connect
      container_name: connect
      depends_on:
        - zookeeper
        - broker
      ports:
        - '8083:8083'
      environment:
        CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
        CONNECT_REST_ADVERTISED_HOST_NAME: connect
        CONNECT_REST_PORT: 8083
        CONNECT_GROUP_ID: compose-connect-group
        CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
        CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
        CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
        CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
        CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
        CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
        CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
        CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
        CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
        CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
        CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
        CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'false'
        CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'
        CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        # CLASSPATH required due to CC-2422
        CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.4.1.jar
        CONNECT_PRODUCER_INTERCEPTOR_CLASSES: 'io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor'
        CONNECT_CONSUMER_INTERCEPTOR_CLASSES: 'io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor'
        CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components'
        CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
  
    schema-registry:
      image: confluentinc/cp-schema-registry:6.0.1
      hostname: schema-registry
      container_name: schema-registry
      depends_on:
        - zookeeper
        - broker
      ports:
        - "8081:8081"
      environment:
        SCHEMA_REGISTRY_HOST_NAME: schema-registry
        SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
        SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
  
    ksqldb-server:
      image: confluentinc/ksqldb-server:0.14.0
      hostname: ksqldb-server
      container_name: ksqldb-server
      depends_on:
        - broker
        - schema-registry
        - connect
      ports:
        - "8088:8088"
      environment:
        KSQL_LISTENERS: "http://0.0.0.0:8088"
        KSQL_BOOTSTRAP_SERVERS: "broker:29092"
        KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
        KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
        KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
        KSQL_KSQL_CONNECT_URL: 'http://connect:8083'
        KSQL_CONNECT_BOOTSTRAP_SERVERS: "broker:9092"
        KSQL_CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
        KSQL_CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
        KSQL_CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
        KSQL_CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
        KSQL_CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
        KSQL_CONNECT_CONFIG_STORAGE_TOPIC: "ksql-connect-configs"
        KSQL_CONNECT_OFFSET_STORAGE_TOPIC: "ksql-connect-offsets"
        KSQL_CONNECT_STATUS_STORAGE_TOPIC: "ksql-connect-statuses"
        KSQL_CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
        KSQL_CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
        KSQL_CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
        KSQL_CONNECT_PLUGIN_PATH: "/usr/share/kafka/plugins"
  
    ksqldb-cli:
      image: confluentinc/ksqldb-cli:0.14.0
      container_name: ksqldb-cli
      depends_on:
        - broker
        - connect
        - ksqldb-server
      entrypoint: /bin/sh
      tty: true
    
    pg-source:
      image: debezium/postgres:13
      hostname: pg-source
      container_name: pg-source
      restart: unless-stopped
      environment:
        POSTGRES_PASSWORD: postgres
        POSTGRES_USER: kagune
        POSTGRES_DB: source_db
      ports:
        - "4532:5432"
      volumes:
        - './pg-source-data:/var/lib/postgresql/data'
        - ./initdb_app.sql:/docker-entrypoint-initdb.d/initdb_app.sql
      command: postgres -c 'wal_level=logical'
  
    pg-metabase:
      image: 'postgres:13'
      hostname: pg-metabase
      container_name: pg-metabase
      restart: unless-stopped
      environment:
        POSTGRES_PASSWORD: postgres
        POSTGRES_USER: kagune
        POSTGRES_DB: metabase_db
      ports:
        - '4531:5432'
      volumes:
        - './pg-metabase-data:/var/lib/postgresql/data'
  
    app-metabase:
      image: 'metabase/metabase:v0.39.0'
      container_name: app-metabase
      mem_limit: 5000m
      restart: unless-stopped
      environment:
        JAVA_TOOL_OPTIONS: '-Xmx4g'
        MB_DB_TYPE: postgres
        MB_DB_DBNAME: source_db
        MB_DB_PORT: 5432
        MB_DB_USER: kagune
        MB_DB_PASS: postgres
        MB_DB_HOST: metabase_db
        MB_DB_CONNECTION_URI: 'postgres://pg-metabase:5432/metabase_db?user=kagune&password=postgres'
      ports:
        - '3000:3000'
      depends_on:
        - pg-metabase
      links:
        - pg-metabase
  
    druid:
      build:
        context: ./assets/druid
        args:
          DRUID_VERSION: 0.20.1
      container_name: druid
      volumes:
        - 'storage:/var/druid/segments'
        - './.filesystem:/tmp/filesystem'
      ports:
        - '8888:8888'
        - '8082:8082'
  
    grafana:
      image: "grafana/grafana"
      ports:
        - "3001:3000"
      environment:
        GF_PATHS_DATA : /var/lib/grafana
        GF_SECURITY_ADMIN_PASSWORD : kafka
      volumes:
        - ./assets/grafana/provisioning:/etc/grafana/provisioning
        - ./assets/grafana/dashboards:/var/lib/grafana/dashboards
      container_name: grafana
      depends_on:
        - prometheus
  
    prometheus:
      image: "prom/prometheus"
      ports:
        - "9090:9090"
      volumes:
        - ./etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      command: "--config.file=/etc/prometheus/prometheus.yml"
      container_name: prometheus
  
    jmx-broker:
      image: "sscaling/jmx-prometheus-exporter"
      ports:
        - "5556:5556"
      environment:
        CONFIG_YML : "/etc/jmx_exporter/config.yml"
      volumes:
        - ./etc/jmx_exporter/config_broker.yml:/etc/jmx_exporter/config.yml
      container_name: jmx-broker
      depends_on:
        - broker
  
  # -----------------------------------------------------------------------
  # Networks declaration.
  # -----------------------------------------------------------------------
    networks:
      network:
        driver: bridge
  
  # -----------------------------------------------------------------------
  # Volumes declaration.
  # -----------------------------------------------------------------------
  volumes:
    pg-metabase-data: 
    pg-source-data: 
    storage: 
      
...